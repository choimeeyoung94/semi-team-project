<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybatis.mapper.userMapper">


  <!-- Mapper 작성 규칙 
    1.쿼리 id는 각 쿼리를 호출할 메소드의 이름과 동일하게 설정하는 것을 권장한다. 
    2. parameterType : 메소드가 쿼리로 전달하는 데이터의 타입이다. TypeAlias를 사용 할 수 있다. 
    3. resultType : 쿼리문이 메소드로 반환하는 값의 타입이다. <select> 태그만 작성 한다.
   -->

 <!-- 회원가입 -->
  <insert id="userSignUp" parameterType="UserDTO">
     INSERT INTO user (account_id, user_name, nick_name, user_password, user_email, user_phone, created_at, salt)
     VALUES (#{accountId}, #{userName}, #{nickName}, #{userPassword}, #{userEmail}, #{userPhone}, NOW(), #{salt})
  </insert>
  
  <!-- 로그인(아이디, 비밀번호) -->
  <select id="selectLogin" parameterType="String" resultType="UserDTO">
    SELECT user_id, account_id, nick_name, user_name, user_password, user_email, salt
      FROM user
     WHERE account_id = #{accountId}
  </select>
  
  <!-- 아이디 중복 검사 -->
  <select id="countByAccountId" parameterType="String" resultType="java.lang.Integer">
    SELECT COUNT(*)
      FROM user
     WHERE account_id = #{accountId}
  </select>
  
  <!-- 닉네임 중복 검사 -->
  <select id="countByNickName" parameterType="String" resultType="java.lang.Integer">
    SELECT COUNT(*)
      FROM user
     WHERE nick_name = #{nickName}
  </select>
  
  <!-- 이메일 중복 검사 -->
  <select id="countByEmail" parameterType="String" resultType="java.lang.Integer">
    SELECT COUNT(*)
      FROM user
     WHERE user_email = #{userEmail}
  </select>

  <!-- 아이디 찾기 -->  
  <select id="findAccountIdByNameAndEmail" parameterType="UserDTO" resultType="String">
    SELECT account_id
      FROM user
     WHERE user_name = #{userName} AND user_email = #{userEmail}
  </select>
  
  <!-- account 사용해서 user 정보 조회 -->
  <select id="getUserByAccountId" parameterType="String" resultType="UserDTO">
    SELECT user_id, account_id, user_name, nick_name, user_email, user_phone, created_at, updated_at, point, profile_image_key, user_password
      FROM user
     WHERE account_id = #{accountId}
  </select>
  
  <!-- userId를 이용해 user 정보 조회 -->
  <select id="getUserByUserId" parameterType="java.lang.Integer" resultType="UserDTO">
    SELECT user_password, salt, profile_image_key
      FROM user
     WHERE user_id = #{userId}
  </select>
  
  <!-- 로그인 로그 저장 -->
  <insert id="insertLogStatus" parameterType="UserStatusDTO">
    INSERT INTO user_status (user_id, account_id, login_at)
    VALUES (#{userId}, #{accountId}, #{loginAt})
  </insert>
  
  <!-- 유저 정보 수정 -->
  <update id="updateUser" parameterType="Map">
    UPDATE user
    SET user_name  = #{user.userName},
        user_email = #{user.userEmail},
        nick_name  = #{user.nickName},
    WHERE account_id = #{prevAccountId}
  </update>

  <update id="updateProfileImageKey">
    UPDATE user
    SET profile_image_key = #{profileImageKey}
    WHERE user_id = #{userId}
  </update>
  
  <!-- 비밀번호 변경 -->
  <update id="changeUserPassword" parameterType="userDTO">
    UPDATE user
       SET user_password = #{userPassword},
           salt = #{salt},
           update_at = NOW()
     WHERE user_id = #{userId}
  </update>
  
  
</mapper>